// Copyright (c) 2019-2021 Decode Detroit
// Author: Patton Doyle
// Licence: GNU GPLv3
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! A testing module that implements useful tools for the testing the program.

/// Test_Vec Macro
///
/// A macro that allows easier comparison of two vectors (one the test vector
/// and the other generated by the test itself).
///
#[cfg(test)]
macro_rules! test_vec {    
    // Compare the test vector with the messages received (order matters)
    (=$line:expr, $test:expr) => {{
        // Import libraries for testing
        use std::time::Duration;
        use tokio::time::sleep;
        
        // Print and check the messages received (wait at most half a second)
        let mut recv = Vec::new();
        loop {
            tokio::select! {
                // Try to find the test updates
                Some(message) = $line.recv() => {
                    // Log the new addition and check for all of them
                    recv.push(message);

                    // Check that the received vector matches the test vector
                    if $test == recv {
                        return;
                    }
                }

                // Only wait half a second
                _ = sleep(Duration::from_millis(500)) => {
                    // Check to see if the vectors are both empty
                    if $test == recv {
                        return;
                    }

                    // Otherwise break
                    break;
                }
            }
        }

        // Print debugging help if the script failed
        println!(
            "===================DEBUG==================\n\nEXPECTED\n{:?}\n\nOUTPUT\n{:?}",
            $test, recv
        );

        // If they were not found, fail the test
        panic!("Failed test vector comparison.");
    }};
}
